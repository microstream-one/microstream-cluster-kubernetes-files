apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: storagenode
spec:
  podManagementPolicy: Parallel
  replicas: 2
  serviceName: node-headless
  selector:
    matchLabels:
      microstream.one/cluster-component: storagenode
  template:
    metadata:
      labels:
        microstream.one/cluster-component: storagenode
        app.kubernetes.io/component: node
    spec:
      imagePullSecrets: [ name: microstream-ocir-credentials ]
      securityContext:
        runAsNonRoot: true
        fsGroupChangePolicy: OnRootMismatch
        fsGroup: 10000
        runAsUser: 10000
        runAsGroup: 10000
      initContainers:
      - name: prepare-storagenode
        image: curlimages/curl:8.11.1
        command: 
        - sh
        - -ce
        - |
          # Remove residual files
          echo "Removing any residual storage files..."
          if [ -d /storage/storage ]; then
            echo "Removing residual storage files"
            rm -r /storage/storage
          fi
          if [ -f /storage/offset ]; then
            echo "Removing residual offset file"
            rm /storage/offset
          fi
          echo "...done!"

          # Find latest backup
          echo "Finding latest backup..."
          while [ -z "$latest_backup" ]; do
            latest_backup=$(find /backups -mindepth 2 -maxdepth 2 -type f -iname ready | cut -d/ -f3 | sort -n | tail -n 1)
          done
          echo "...found latest backup $latest_backup"

          # Copy backup files into our storage
          echo "Copying files..."
          cp -r /backups/$latest_backup/* /storage
          echo "...done!"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: [ all ]
        volumeMounts:
        - name: backups
          mountPath: /backups
          readOnly: true
        - name: storage
          mountPath: /storage
      containers:
      - name: storagenode
        image: ocir.microstream.one/onprem/image/microstream-cluster-storage-node:1.14.0
        args: [ /app/application.jar ]
        workingDir: /storage
        ports:
        - name: http
          containerPort: 8080
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: [ all ]
        volumeMounts:
        - name: storage
          mountPath: /storage
        - name: app
          mountPath: /app
          readOnly: true
        # Restart the pod if container is not responsive at all
        livenessProbe:
          periodSeconds: 10
          timeoutSeconds: 20
          failureThreshold: 2
          httpGet:
            path: /microstream-cluster-controller/microstream-health
            port: http
        # Remove the pod from being ready if we fail to check
        readinessProbe:
          periodSeconds: 10
          timeoutSeconds: 20
          failureThreshold: 1
          httpGet:
            path: /microstream-cluster-controller/microstream-health/ready
            port: http
        env:
        - name: MSCNL_PROD_MODE
          value: "true"
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: IS_BACKUP_NODE
          value: "false"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: kafka-0.kafka:9092
        - name: MSCNL_KAFKA_TOPIC_NAME
          value: storage-data
        - name: MSCNL_SECURE_KAFKA
          value: "false"
        - name: MSCNL_KAFKA_USERNAME
          value: ""
        - name: MSCNL_KAFKA_PASSWORD
          value: ""
        - name: MICROSTREAM_PATH
          value: "/microstream-cluster-controller/"
        - name: STORAGE_LIMIT_GB
          value: "20G"
        - name: STORAGE_LIMIT_CHECKER_PERCENT
          value: "95"
        - name: STORAGE_LIMIT_CHECKER_INTERVAL_MINUTES
          value: "60"
      volumes:
      - name: storage
        emptyDir:
          sizeLimit: 20G
      - name: backups
        persistentVolumeClaim:
          claimName: storage-backups
          readOnly: true
      - name: app
        persistentVolumeClaim:
          claimName: user-app
          readOnly: true